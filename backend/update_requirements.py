#!/usr/bin/env python
import contextlib
import sys
from dataclasses import KW_ONLY, dataclass, field
from pathlib import Path
from subprocess import Popen

from pydantic_settings import BaseSettings, SettingsConfigDict


@dataclass
class RequirementsSpec:
    output_file: str | Path
    _: KW_ONLY
    extras: list[str] = field(default_factory=list)
    exclude_packages: list[str] = field(default_factory=list)


here = Path(__file__).resolve().parent
# Requirements are generated by a subprocess who points cwd to `here`, so a relative
# path is fine
# Exclude opencv-python since it's huge and graphical; we can use opencv-python-headless
# instead
deps = [
    RequirementsSpec("requirements-pinned.txt", exclude_packages=["opencv-python"]),
    RequirementsSpec(
        "requirements-dev-pinned.txt",
        extras=["dev"],
        exclude_packages=["opencv-python"],
    ),
]


class CliOptions(BaseSettings):
    model_config = SettingsConfigDict(cli_parse_args=True)

    upgrade: bool = False
    args: list[str] = []


def main(options: CliOptions):
    if sys.version_info < (3, 10):
        raise RuntimeError("Should only run on python >= 3.10 for now")
    commands: list[list[str]] = []
    for dep in deps:
        dep_output = Path(dep.output_file)
        (here / dep_output.parent).mkdir(exist_ok=True)
        extras_fmt = [f"--extra={e}" for e in dep.extras]
        exclude_fmt = []
        if dep.exclude_packages:
            exclude_fmt = ["--no-allow-unsafe"] + [
                f"--unsafe-package={e}" for e in dep.exclude_packages
            ]
        cmd = [
            "pip-compile",
            "--no-emit-index-url",
            "--no-allow-unsafe",
            "--strip-extras",
            *extras_fmt,
            *exclude_fmt,
            f"--output-file={dep.output_file}",
            "-q",
        ]
        if options.upgrade:
            cmd.append("--upgrade")
        print(cmd)
        commands.append(cmd)
    with contextlib.ExitStack() as stack:
        for cmd in commands:
            stack.enter_context(Popen(cmd, cwd=here))
    # stack will wait() for all processes on exit


if __name__ == "__main__":
    _opts = CliOptions()
    main(_opts)
